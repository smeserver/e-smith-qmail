diff -Nur -x '*.orig' -x '*.rej' e-smith-qmail-1.9.1/createlinks mezzanine_patched_e-smith-qmail-1.9.1/createlinks
--- e-smith-qmail-1.9.1/createlinks	2006-02-16 21:28:30.000000000 -0500
+++ mezzanine_patched_e-smith-qmail-1.9.1/createlinks	2006-02-16 21:27:27.000000000 -0500
@@ -44,7 +44,6 @@
 foreach (qw(
     /var/qmail/alias/.qmail-default
     /var/qmail/alias/.qmail-localdelivery-default
-    /home/e-smith/.qmail
     ))
 {
     templates2events($_, qw(
diff -Nur -x '*.orig' -x '*.rej' e-smith-qmail-1.9.1/root/etc/e-smith/db/accounts/migrate/10AdminEmail mezzanine_patched_e-smith-qmail-1.9.1/root/etc/e-smith/db/accounts/migrate/10AdminEmail
--- e-smith-qmail-1.9.1/root/etc/e-smith/db/accounts/migrate/10AdminEmail	1969-12-31 19:00:00.000000000 -0500
+++ mezzanine_patched_e-smith-qmail-1.9.1/root/etc/e-smith/db/accounts/migrate/10AdminEmail	2006-02-16 21:22:19.000000000 -0500
@@ -0,0 +1,14 @@
+{
+    my $conf = esmith::ConfigDB->open;
+    return unless $conf;
+
+    my $admin_email = $conf->get_value_and_delete('AdminEmail');
+    return unless $admin_email;
+
+    my $admin = $DB->get('admin') ||
+		$DB->new_record('admin', {type => 'system'});
+    $admin->merge_props(
+	    EmailForward => 'forward',
+	    ForwardAddress => $admin_email,
+	);
+}
diff -Nur -x '*.orig' -x '*.rej' e-smith-qmail-1.9.1/root/etc/e-smith/events/actions/qmail-update-user mezzanine_patched_e-smith-qmail-1.9.1/root/etc/e-smith/events/actions/qmail-update-user
--- e-smith-qmail-1.9.1/root/etc/e-smith/events/actions/qmail-update-user	2006-01-11 02:04:56.000000000 -0500
+++ mezzanine_patched_e-smith-qmail-1.9.1/root/etc/e-smith/events/actions/qmail-update-user	2006-02-16 21:28:02.000000000 -0500
@@ -26,6 +26,8 @@
 use esmith::ConfigDB;
 use esmith::AccountsDB;
 use esmith::templates;
+use User::pwent;
+
 
 my $accountsdb = esmith::AccountsDB->open_ro or
     die "Could not open accounts db\n";
@@ -44,13 +46,15 @@
 }
 else
 {
-    @users = ( $accountsdb->users );
+    @users = ( $accountsdb->users, $accountsdb->get('admin') );
 }
 
 foreach my $userName (@users)
 {
     $userName = $userName->key;
 
+    setpwent();
+    my $home = getpwnam($userName)->dir;
     for my $dotfile ( qw(.qmail .qmail-junkmail) )
     {
         esmith::templates::processTemplate (
@@ -65,16 +69,15 @@
 		    "/etc/e-smith/templates-user-custom",
 		    "/etc/e-smith/templates-user",
 		],
-	    OUTPUT_PREFIX		=>
-		"/home/e-smith/files/users/$userName",
+	    OUTPUT_PREFIX		=> "$home",
 	    UID				=> $userName,
 	    GID				=> $userName,
 	    PERMS			=> 0644,
         } );
     };
-    unless (-f "/home/e-smith/files/users/$userName/.qmail-default")
+    unless (-f "$home/.qmail-default")
     {
-	symlink ".qmail", "/home/e-smith/files/users/$userName/.qmail-default";
+	symlink ".qmail", "$home/.qmail-default";
     }
 }
 
diff -Nur -x '*.orig' -x '*.rej' e-smith-qmail-1.9.1/root/etc/e-smith/templates/home/e-smith/.qmail mezzanine_patched_e-smith-qmail-1.9.1/root/etc/e-smith/templates/home/e-smith/.qmail
--- e-smith-qmail-1.9.1/root/etc/e-smith/templates/home/e-smith/.qmail	2006-01-11 02:04:56.000000000 -0500
+++ mezzanine_patched_e-smith-qmail-1.9.1/root/etc/e-smith/templates/home/e-smith/.qmail	1969-12-31 19:00:00.000000000 -0500
@@ -1,199 +0,0 @@
-{
-    # vim: ft=perl:
-    $OUT = "";
-
-    my $local_delivery = "";
-    my $dt = $qmail{DeliveryType} || '';
-    my $preprocessing = "";
-    if ($dt eq 'program')
-    {
-        $preprocessing .= '| ';
-    }
-    my $default = './Maildir/';
-    $preprocessing .= $qmail{DeliveryInstruction} || '';
-
-    $OUT = "$preprocessing\n" if $preprocessing;
-
-    # Administrative mail will be redirected to the address specified
-    # by $AdminEmail. We need to make sure that this address does NOT
-    # result in a mail loop.
-    #
-    # Therefore, we need to see if the domain portion of the address is
-    # a domain controlled by the server, and if so, is the user portion
-    # of the address as system account. If both of these conditions
-    # are true, then mail for admin is being redirected to admin which
-    # is definitely a mail loop. In this case we simply tell qmail to
-    # deliver to the admin users ./Maildir/.
-    #
-    # If one (or both) of these conditions are false, then we simply
-    # accept the address with no further checking.
-
-    unless (defined $AdminEmail)
-    {
-        # Undefined - must be a local delivery
-
-        $OUT .= $default;
-        return;
-    }
-
-    if ($AdminEmail =~ /^\s*$/)
-    {
-        # Blank - must be a local delivery
-
-        $OUT .= $default;
-        return;
-    }
-
-    # Get the user and domain components of the address.
-
-    my (@addr) = split(/\@/, $AdminEmail);
-
-    my $user_component = "";
-    my $domain_component = "";
-
-    if (scalar @addr > 2)
-    {
-        # More than one '@' char in address
-
-        $domain_component = pop @addr;
-        $user_component = join('\@', @addr);
-    } elsif (scalar @addr == 2)
-    {
-        $domain_component = pop @addr;
-        $user_component = pop @addr;
-    }
-    else
-    {
-        $user_component = pop @addr;
-    }
-
-    use esmith::AccountsDB;
-    my $adb = esmith::AccountsDB->open_ro();
-
-    # Is the user component a system account?
-
-    my $account = $adb->get($user_component);
-    if (defined $account && $account->prop('type') eq "system")
-    {
-        # User component is a system account. Does it match one of
-        # our domains?
-
-        unless ($domain_component)
-        {
-            # NO domain component. This will ALWAYS be a local domain.
-
-            $OUT .= $default;
-            return;
-        }
-
-        if ($domain_component eq $DomainName)
-        {
-            $OUT .= $default;
-            return;
-        }
-
-        # Loop through the domains and hosts
-
-	use esmith::DomainsDB;
-	my $ddb = esmith::DomainsDB->open_ro();
-
-        my $host;
-        my $domain;
-
-        # Handle each defined virtual domain
-
-        foreach $domain ( $ddb->domains)
-        {
-            if ($domain_component eq $domain->key)
-            {
-                $OUT .= $default;
-                return;
-            }
-        }
-
-	use esmith::HostsDB;
-	my $hdb = esmith::HostsDB->open_ro();
-
-        # Handle each defined host
-
-        foreach $host ( $hdb->hosts )
-        {
-            my $ip = $host->prop('ExternalIP') || '';
-            my $hosttype = $host->prop('HostType') || '';
-
-            if ($host->key =~ /\./)
-            {
-                # Host is fully qualified
-
-                my ($tempHost, $tempDomain) = split /\./, $host->key, 2;
-
-                if ($domain_component eq $tempDomain)
-                {
-                    if ($hosttype eq 'Self' || $ip eq $ExternalIP)
-                    {
-                        $OUT .= $default;
-                        return;
-                    }
-                    else
-                    {
-                        $OUT .= '&' . $AdminEmail;
-                        return;
-                    }
-                }
-            }
-            else         #FIXME - this should no longer be necessary
-            {
-                # Host is unqualified
-
-                # Handle the host within the local domain and sub domain
-
-                if ($domain_component eq $host->key . ".$DomainName")
-                {
-                    if ($hosttype eq 'Self' || $ip eq $ExternalIP)
-                    {
-                        $OUT .= $default;
-                        return;
-                    }
-                    else
-                    {
-                        $OUT .= '&' . $AdminEmail;
-                        return;
-                    }
-                }
-
-                # Handle the host for all of the virtual domains
-
-                foreach $domain ( $ddb->domains )
-                {
-                    if ($domain_component eq $host->key . "." . $domain->key)
-                    {
-                        if ($hosttype eq 'Self' || $ip eq $ExternalIP)
-                        {
-                            $OUT .= $default;
-                            return;
-                        }
-                        else
-                        {
-                            $OUT .= '&' . $AdminEmail;
-                            return;
-                        }
-                    }
-                }
-            }
-        }
-
-        # Catch all. If nothing matched above, it should be safe to
-        # use the supplied address.
-
-        $OUT .= '&' . $AdminEmail;
-        return;
-    }
-    else
-    {
-        # User component is not a system account, so we can happily use
-        # the address, regardless of the domain component.
-
-        $OUT .= '&' . $AdminEmail;
-        return;
-    }
-}
diff -Nur -x '*.orig' -x '*.rej' e-smith-qmail-1.9.1/root/etc/e-smith/templates-user/.qmail/00setup mezzanine_patched_e-smith-qmail-1.9.1/root/etc/e-smith/templates-user/.qmail/00setup
--- e-smith-qmail-1.9.1/root/etc/e-smith/templates-user/.qmail/00setup	2006-01-11 02:04:56.000000000 -0500
+++ mezzanine_patched_e-smith-qmail-1.9.1/root/etc/e-smith/templates-user/.qmail/00setup	2006-02-16 20:36:50.000000000 -0500
@@ -10,10 +10,5 @@
     %props = $user->props;
     $props{EmailForward} ||= 'local';
 
-    die
-        "Account $USERNAME is not a user account; "
-        . "update email forwarding failed.\n"
-        unless $props{type} eq 'user';
-
     $OUT = '';
 }
